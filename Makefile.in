#
# Makefile for StringsUtil.
#
#     https://github.com/michaelrsweet/stringsutil
#
# Copyright Â© 2022-2024 by Michael R Sweet.
#
# Licensed under Apache License v2.0.  See the file "LICENSE" for more
# information.
#

#
# This is a POSIX makefile
#

.POSIX:


#
# Version number...
#

VERSION	=	@VERSION@


#
# Programs...
#

AR		=	@AR@
CC		=	@CC@
INSTALL		=	@INSTALL@
LN		=	@LN@ -sf
MKDIR           =       @MKDIR@ -p
RANLIB		=	@RANLIB@
RM		=	@RM@ -f
RMDIR		=	@RMDIR@
SHELL		=	/bin/sh


#
# Installation programs...
#

INSTALL_BIN	=	$(INSTALL) -c -m 755
INSTALL_DATA	=	$(INSTALL) -c -m 444
INSTALL_DIR	=	$(INSTALL) -d -m 755
INSTALL_LIB	=	$(INSTALL) -c -m 755
INSTALL_MAN	=	$(INSTALL) -c -m 444


#
# Code signing...
#

CODE_SIGN	=	@CODE_SIGN@
CODESIGN_IDENTITY =	-
CSFLAGS		=	-s "$(CODESIGN_IDENTITY)" @CSFLAGS@ --timestamp


#
# Documentation (via codedoc) options...
#

DOCFLAGS =	--author "Michael R Sweet" \
		--copyright "Copyright (c) 2022-2024 by Michael R Sweet" \
		--docversion $(VERSION)


#
# Library archiver...
#

ARFLAGS		=	@ARFLAGS@


#
# C compiler and preprocessor...
#

CFLAGS		=	@CFLAGS@ $(CPPFLAGS) $(OPTIM) $(WARNINGS)
CPPFLAGS	=	@CPPFLAGS@ -DVERSION='"$(VERSION)"'
WARNINGS	=	@WARNINGS@


#
# Linker options...
#

LDFLAGS		=	@LDFLAGS@ $(OPTIM)
LIBS		=	@LIBS@ -lm


#
# Optimization and architecture options for both the compiler and linker.
#

OPTIM		=	@OPTIM@


#
# Directories...
#

bindir		=	@bindir@
datadir		=	@datadir@
datarootdir	=	@datarootdir@
docdir		=	@docdir@
exec_prefix	=	@exec_prefix@
includedir	=	@includedir@
infodir		=	@infodir@
libdir		=	@libdir@
libexecdir	=	@libexecdir@
localstatedir	=	@localstatedir@
mandir		=	@mandir@
oldincludedir	=	@oldincludedir@
prefix		=	@prefix@
sbindir		=	@sbindir@
sharedstatedir	=	@sharedstatedir@
srcdir		=	@srcdir@
sysconfdir	=	@sysconfdir@
top_srcdir	=	@top_srcdir@

BUILDROOT	=	$(DSTROOT)$(DESTDIR)


#
# Rules...
#

.SILENT:
.SUFFIXES:	.c .o
.c.o:
	echo "Compiling $<..."
	$(CC) $(CFLAGS) -c -o $@ $<


#
# Targets...
#

LIBOBJS		=	\
			sf-core.o \
			sf-simple.o
OBJS		=	\
			$(LIBOBJS) \
			stringsutil.o
TARGETS		=	\
			libsf.a \
			stringsutil


all:		$(TARGETS)


clean:
	$(RM) $(TARGETS) $(OBJS)


install:	all
	echo "Installing stringsutil to $(BUILDROOT)$(bindir)..."
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(bindir)
	$(INSTALL_BIN) -m 755 stringsutil $(BUILDROOT)$(bindir)
	echo "Installing header to $(BUILDROOT)$(includedir)..."
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(includedir)
	$(INSTALL_DATA) -m 644 sf.h $(BUILDROOT)$(includedir)
	echo "Installing library to $(BUILDROOT)$(libdir)..."
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(libdir)
	$(INSTALL_BIN) -m 644 libsf.a $(BUILDROOT)$(libdir)
	$(RANLIB) $(BUILDROOT)$(libdir)/libsf.a
	echo "Installing pkg-config info to $(BUILDROOT)$(libdir)/pkgconfig..."
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(prefix)/lib/pkgconfig
	$(INSTALL_DATA) -m 644 libsf.pc $(BUILDROOT)$(prefix)/lib/pkgconfig
	echo "Installing man pages to $(DESTDIR)$(mandir)..."
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(mandir)/man1
	$(INSTALL_DATA) -m 644 stringsutil.1 $(BUILDROOT)$(mandir)/man1
	$(INSTALL_DIR) -m 755 $(BUILDROOT)$(mandir)/man3
	$(INSTALL_DATA) -m 644 libsf.3 $(BUILDROOT)$(mandir)/man3


# Analyze code with the Clang static analyzer <https://clang-analyzer.llvm.org>
clang:
	echo "Analyzing code with Clang..."
	clang $(CPPFLAGS) --analyze $(OBJS:.o=.c) 2>clang.log
	rm -rf $(OBJS:.o=.plist)
	test -s clang.log && (echo "$(GHA_ERROR)Clang detected issues."; echo ""; cat clang.log; exit 1) || exit 0


# Analyze code using Cppcheck <http://cppcheck.sourceforge.net>
cppcheck:
	echo "Analyzing code with cppcheck..."
	cppcheck $(CPPFLAGS) --template=gcc --addon=cert.py --suppressions-list=.cppcheck $(OBJS:.o=.c) 2>cppcheck.log
	test -s cppcheck.log && (echo "$(GHA_ERROR)Cppcheck detected issues."; echo ""; cat cppcheck.log; exit 1) || exit 0


# Make various bits...
stringsutil:	stringsutil.o libsf.a
	echo "Linking $@..."
	$(CC) $(LDFLAGS) -o stringsutil stringsutil.o libsf.a $(LIBS)


libsf.a:	$(LIBOBJS)
	echo "Archiving $@..."
	rm -f $@
	$(AR) $(ARFLAGS) $@ $(LIBOBJS)
	$(RANLIB) $@


test:		all
	rm -f test.strings
	echo "Scan test: \c"
	./stringsutil -f test.strings -n SFSTR scan $(OBJS:.o=.c) >test.log 2>&1
	if test -f test.strings -a $$(wc -l <test.strings 2>/dev/null) = 62; then \
		echo "PASS"; \
	else \
		echo "FAIL (Did not scan the expected number of strings)"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Export test (C code): \c"
	./stringsutil -f test.strings export test.c >test.log 2>&1
	if test -f test.c -a $$(wc -l <test.c 2>/dev/null) = 62; then \
		echo "PASS"; \
	else \
		echo "FAIL (Did not export the expected number of strings)"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Compile test: \c"
	if gcc -o test.o -c test.c >test.log 2>&1; then \
		echo "PASS"; \
	else \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Export test (GNU gettext po): \c"
	./stringsutil -f test.strings export test.po >test.log 2>&1
	if test -f test.po -a $$(wc -l <test.po 2>/dev/null) = 184; then \
		echo "PASS"; \
	else \
		echo "FAIL (Did not export the expected number of lines)"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Report test (test-yy.strings): \c"
	if ./stringsutil -f test.strings report test-yy.strings >test.log 2>&1; then \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	else \
		echo "PASS"; \
	fi
	echo "Report test (test-zz.strings): \c"
	if ./stringsutil -f test.strings report test-zz.strings >test.log 2>&1; then \
		echo "PASS"; \
	else \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Import test (test-zz.po): \c"
	if ./stringsutil -f test.strings import test-zz.po >test.log 2>&1; then \
		if test $$(wc -l <test.strings 2>/dev/null) = 62; then \
			echo "PASS"; \
		else \
			echo "FAIL (did not preserve strings)"; \
			cat test.log; \
			exit 1; \
		fi \
	else \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Import test (test-zz.po -a): \c"
	if ./stringsutil -f test.strings import -a test-zz.po >test.log 2>&1; then \
		if test $$(wc -l <test.strings 2>/dev/null) = 64; then \
			echo "PASS"; \
		else \
			echo "FAIL (did not add new strings)"; \
			cat test.log; \
			exit 1; \
		fi \
	else \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Import test (test-zz.strings): \c"
	if ./stringsutil -f test.strings import test-zz.strings >test.log 2>&1; then \
		if test $$(wc -l <test.strings 2>/dev/null) = 64; then \
			echo "PASS"; \
		else \
			echo "FAIL (did not preserve strings)"; \
			cat test.log; \
			exit 1; \
		fi \
	else \
		echo "FAIL"; \
		cat test.log; \
		exit 1; \
	fi
	echo "Localization test (es): \c"
	if (LANG=es_ES.UTF-8 ./stringsutil --help | grep -q NOMBRE); then \
		echo "PASS"; \
	else \
		echo "FAIL"; \
		LANG=es_ES.UTF-8 ./stringsutil --help; \
	fi
	echo "Localization test (fr): \c"
	if (LANG=fr_CA.UTF-8 ./stringsutil --help | grep -q NOM); then \
		echo "PASS"; \
	else \
		echo "FAIL"; \
		LANG=fr_CA.UTF-8 ./stringsutil --help; \
	fi
	rm -f test.c test.log test.o test.po test.strings
	echo "All tests passed."


# Update localizations
update:		stringsutil
	echo Updating strings files...
	rm -f base.strings
	./stringsutil -f base.strings -n SFSTR scan stringsutil.c
	./stringsutil -f es.strings merge base.strings
	./stringsutil -f fr.strings merge base.strings

update2:	stringsutil
	./stringsutil -f es.strings export es_strings.h
	./stringsutil -f fr.strings export fr_strings.h


#
# Make documentation
#

doc:
	echo Generating stringsutil.html...
	codedoc $(DOCFLAGS) --title "StringsUtil v$(VERSION) Manual" --coverimage stringsutil-512.png --body stringsutil.md stringsutil.xml sf.h $(LIBOBJS:.o=.c) >stringsutil.html
	echo Generating libsf.3...
	codedoc $(DOCFLAGS) --title "stringsutil - libsf functions" --man libsf --section 3 --body libsf.md stringsutil.xml >libsf.3
	rm -f stringsutil.xml


#
# Dependencies...
#

$(OBJS):	sf.h sf-private.h Makefile
stringsutil.o:	es_strings.h fr_strings.h
