.TH libsf 3 "stringsutil - libsf functions" "2022-04-15" "stringsutil - libsf functions"
.SH NAME
libsf \- stringsutil - libsf functions
.SH INTRODUCTION
.PP
The libsf library has a single header file:
.nf

    #include <sf.h>
.fi
.PP
Use the pkg\-config command to get the proper compiler and linker options:
.nf

    CFLAGS = `pkgconfig \-\-cflags libsf`
    LIBS = `pkgconfig \-\-libs libsf`
    
    cc \-o myprogram `pkgconfig \-\-cflags libsf` myprogram.c `pkgconfig \-\-libs libsf`
.fi
.PP
A typical program will either have a directory containing ".strings" files installed on disk or a collection of header files containing ".strings" files as constant C strings. Call sfSetLocale to initialize the current locale and then sfRegisterDirectory or sfRegisterString to initialize the default localization strings:
.nf

    // ".strings" files in "/usr/local/share/myapp/strings"...
    #include <sf.h>
    
    \...
    
    sfSetLocale();
    sfRegisterDirectory("/usr/local/share/myapp/strings");
    
    
    // ".strings" files in constant strings...
    #include <sf.h>
    #include "de_strings.h"
    #include "es_strings.h"
    #include "fr_strings.h"
    #include "it_strings.h"
    #include "ja_strings.h"
    
    \...
    
    sfSetLocale();
    sfRegisterString("de", de_strings);
    sfRegisterString("es", es_strings);
    sfRegisterString("fr", fr_strings);
    sfRegisterString("it", it_strings);
    sfRegisterString("ja", ja_strings);
.fi
.PP
Once the current local is initialized, you can use the sfPrintf and sfPuts functions to display localized messages. The SFSTR macro is provided by the <sf.h> header to identify strings for localization:
.nf

    sfPuts(stdout, SFSTR("Usage: myprogram [OPTIONS] FILENAME"));
    
    \...
    
    sfPrintf(stderr, SFSTR("myprogram: Expected '\-n' value %d out of range."), n);
    
    \...
    
    sfPrintf(stderr, SFSTR("myprogram: Syntax error on line %d of '%s'."), linenum, filename);
.fi

.SH FUNCTIONS
.SS sfAddString
Add a localization string.
.PP
.nf
bool  sfAddString (
    sf_t *sf,
    const char *key,
    const char *text,
    const char *comment
);
.fi
.PP
This function adds a localization string to the collection.
.SS sfDelete
Free a collection of localization strings.
.PP
.nf
void sfDelete (
    sf_t *sf
);
.fi
.PP
This function frees all memory associated with the localization strings.
.SS sfFormatString
Format a localized string.
.PP
.nf
const char * sfFormatString (
    sf_t *sf,
    char *buffer,
    size_t bufsize,
    const char *key,
    ...
);
.fi
.PP
This function formats a printf-style localized string using the specified
localization strings.  If no localization exists for the format (key) string,
the original string is used.  All \fBsnprintf\fR format specifiers are supported.
.PP
The default localization strings ("sf" passed as \fBNULL\fR) are initialized
using the \fIsfSetLocale\fR, \fIsfRegisterDirectory\fR, and
\fIsfRegisterString\fR functions.
.SS sfGetError
Get the last error message, if any.
.PP
.nf
const char * sfGetError (
    sf_t *sf
);
.fi
.PP
This function returns the last error from \fIsfLoadFile\fR and
\fIsfLoadString\fR, if any.
.SS sfGetString
Lookup a localized string.
.PP
.nf
const char * sfGetString (
    sf_t *sf,
    const char *key
);
.fi
.PP
This function looks up a localized string for the specified key string.
If no localization exists, the key string is returned.
.PP
The default localization strings ("sf" passed as \fBNULL\fR) are initialized
using the \fIsfSetLocale\fR, \fIsfRegisterDirectory\fR, and
\fIsfRegisterString\fR functions.
.SS sfHasString
Determine whether a string is localized.
.PP
.nf
bool  sfHasString (
    sf_t *sf,
    const char *key
);
.fi
.PP
This function looks up a localization string, returning \fBtrue\fR if the string
exists and \fBfalse\fR otherwise.
.SS sfLoadFile
Load a ".strings" file.
.PP
.nf
bool  sfLoadFile (
    sf_t *sf,
    const char *filename
);
.fi
.PP
This function loads a ".strings" file.  The "sf" argument specifies a
collection of localization strings that was created using the \fIsfNew\fR
function.
.PP
When loading the strings, any existing strings in the collection are left
unchanged.
.SS sfLoadString
Load a ".strings" file from a compiled-in string.
.PP
.nf
bool  sfLoadString (
    sf_t *sf,
    const char *data
);
.fi
.PP
This function loads a ".strings" file from a compiled-in string.  The "sf"
argument specifies a collection of localization strings that was created
using the \fIsfNew\fR function.
.PP
When loading the strings, any existing strings in the collection are left
unchanged.
.SS sfNew
Create a new (empty) set of localization strings.
.PP
.nf
sf_t * sfNew (void);
.fi
.PP
This function creates a new (empty) set of localization strings.  Use the
\fIsfLoadFile\fR and/or \fIsfLoadString\fR functions to load
localization strings.
.SS sfPrintf
Print a formatted localized message followed by a newline.
.PP
.nf
void sfPrintf (
    FILE *fp,
    const char *message,
    ...
);
.fi
.PP
This function prints a formatted localized message followed by a newline to
the specified file, typically \fBstdout\fR or \fBstderr\fR.  You must call
\fIsfSetLocale\fR and \fIsfRegisterString\fR or \fIsfRegisterDirectory\fR
to initialize the message catalog that is used.
.SS sfPuts
Print a localized message followed by a newline.
.PP
.nf
void sfPuts (
    FILE *fp,
    const char *message
);
.fi
.PP
This function prints a localized message followed by a newline to the
specified file, typically \fBstdout\fR or \fBstderr\fR.  You must call
\fIsfSetLocale\fR and \fIsfRegisterString\fR or \fIsfRegisterDirectory\fR
to initialize the message catalog that is used.
.SS sfRegisterDirectory
Register ".strings" files in a directory.
.PP
.nf
void sfRegisterDirectory (
    const char *directory
);
.fi
.PP
This function registers ".strings" files in a directory.  You must call
\fIsfSetLocale\fR first to initialize the current locale.
.SS sfRegisterString
Register a ".strings" file from a compiled-in string.
.PP
.nf
void sfRegisterString (
    const char *locale,
    const char *data
);
.fi
.PP
This function registers a ".strings" file from a compiled-in string.  You
must call \fIsfSetLocale\fR first to initialize the current locale.
.SS sfRemoveString
Remove a localization string.
.PP
.nf
bool  sfRemoveString (
    sf_t *sf,
    const char *key
);
.fi
.PP
This function removes a localization string from the collection.
.SS sfSetLocale
Set the current locale.
.PP
.nf
void sfSetLocale (void);
.fi
.PP
This function calls \fBsetlocale\fR to initialize the current locale based on
the current user session, and then creates an empty message catalog that is
filled by calls to \fIsfRegisterDirectory\fR and/or \fIsfRegisterString\fR.
.SH TYPES
.SS sf_t
Strings file
.PP
.nf
typedef struct _sf_s sf_t;
.fi
.SH AUTHOR
.PP
Michael R Sweet
.SH COPYRIGHT
.PP
Copyright (c) 2022 by Michael R Sweet
